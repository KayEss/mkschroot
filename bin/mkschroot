#!/usr/bin/env python
import os
from simplejson import load
import sys
import tempfile

from schroot import execute, sudo
from schroot.chroot import PERSONALITY, Schroot


def schroot_sudo(name, program, *args):
    """
        Execute the program as root in the schroot environment.
    """
    return execute('schroot', '--chroot', name, '--user', 'root',
            '--directory', '/home/', '--',
        program, *args)


def main(json_file):
    config = load(file(sys.argv[1]))
    for name in config["schroot"].keys():
        chroot = Schroot(config, name)
        chroot.update_conf_file()
        if not os.path.exists(chroot['conf']['directory']):
            bootstrap = ["debootstrap"]
            if chroot.has_key('variant'):
                bootstrap.append("--variant=%s" % chroot["variant"])
            bootstrap.append("--arch=%s" % ARCH[chroot['conf']['personality']])
            bootstrap.append(chroot['release'])
            bootstrap.append(chroot['conf']['directory'])
            bootstrap.append(config['source'])
            if config.has_key('http-proxy'):
                bootstrap.insert(0, 'http_proxy="%s"' % config['http-proxy'])
            sudo(*bootstrap)
            is_new = True
        else:
            is_new = False
        source_apt_conf = '/etc/apt/apt.conf'
        schroot_apt_conf = os.path.join(
                chroot['conf']['directory'], 'etc/apt/apt.conf')
        do_update = False
        if os.path.exists(source_apt_conf) and (
                not os.path.exists(schroot_apt_conf) or
                file(source_apt_conf).read() != file(schroot_apt_conf).read()):
            sudo('cp', source_apt_conf, schroot_apt_conf)
            do_update = True
        for source, location in chroot['sources'].items():
            source_path = os.path.join(chroot['conf']['directory'],
                'etc/apt/sources.list.d/', source +'.list')
            if not os.path.exists(source_path):
                create_root_file(source_path,
                    "deb %s %s %s\n" % (location['source'],
                        chroot['release'], source))
                do_update = True
        if do_update or not is_new:
            schroot_sudo(name, 'apt-get', 'update')
        if not is_new:
            schroot_sudo(name, 'apt-get', 'dist-upgrade', 'y', '--auto-remove')
        schroot_sudo(name, 'apt-get', 'install', '-y', '--auto-remove',
            *chroot['packages'])


if __name__ == '__main__':
    main(sys.argv[1])

