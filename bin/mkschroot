#!/usr/bin/env python
import os
from simplejson import load
import sys
import tempfile


PERSONALITY = 'amd64' # Assume 64 bit for now


def execute(program, *args):
    """
        Execute a program and return True if it worked.
    """
    command = '%s %s' % (program, ' '.join([str(a) for a in args]))
    print "Starting", command
    return os.system(command) == 0


def sudo(program, *args):
    """
        Execute a program with sudo rights
    """
    return execute("sudo", program, *args)


def build_config(config, name):
    """
        Build a chroot configuration by mixing the global and local configuration.
    """
    chroot = dict(conf={})
    def copy_into(struct):
        for key, value in struct.items():
            if key == "conf":
                for conf, choice in value.items():
                    chroot[key][conf] = choice
            else:
                chroot[key] = value
    copy_into(config['defaults'])
    copy_into(config['schroot'][name])
    if not chroot.has_key('directory'):
        chroot['directory'] = os.path.join(config['root'], name)
    if not chroot.has_key('personality'):
        chroot['personality'] = PERSONALITY
    if not chroot['conf'].has_key('type'):
        chroot['conf']['type'] = 'directory'
    if not chroot['conf'].has_key('description'):
        chroot['conf']['description'] = '%s %s' % (
            chroot['release'], chroot['personality'])
    return chroot


def main(json_file):
    config = load(file(sys.argv[1]))
    for name in config["schroot"].keys():
        chroot = build_config(config, name)
        conf_file = '[%s]\n' % name
        for conf, value in chroot['conf'].items():
            if conf == 'personality' and value == PERSONALITY:
                value = None
            elif issubclass(type(value), list):
                value = ','.join(value)
            if value:
                conf_file += "%s=%s\n" % (conf, value)
        file_loc = os.path.join('/etc/schroot/chroot.d/', name)
        if not os.path.exists(file_loc) or file(file_loc, "r").read() != conf_file:
            tmp_file = tempfile.NamedTemporaryFile(delete=False)
            tmp_file.write(conf_file)
            sudo("mv", tmp_file.name, file_loc)
        print name, chroot
        print conf_file


if __name__ == '__main__':
    main(sys.argv[1])
